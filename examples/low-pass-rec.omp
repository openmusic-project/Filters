; OM File Header - Saved 2009/11/04 13:29:35
; (6.010006 :patc (om-make-point 175 48) (om-make-point 50 50) (om-make-point 726 861) "" 183 0 nil "2009/11/04 13:25:00")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-fil")))(setf *om-current-persistent* (om-load-patch1 "low-pass-rec" (quote ((om-load-boxcall (quote bastype) "aux5" (quote t) (quote nil) (om-make-point 376 402) (om-make-point 21 30) 5 "5" nil) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 315 405) (om-make-point 21 30) 2 "2" nil) (om-load-boxcall (quote genfun) "LOW-PASS-REC" (quote filtres::low-pass-rec) (quote ((om-load-inputfun (quote input-funbox) "list of data" "DATA" (list 1 2 3 4 5 6)) (om-load-inputfun (quote input-funbox) "window size in samples data" "WINDOW" 100) (om-load-inputfun (quote input-funbox) "recursion level" "DEEP" 1))) (om-make-point 281 435) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux8" (quote t) (quote nil) (om-make-point 947 549) (om-make-point 11 20) 8 "8" nil) (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 425 491) (om-make-point 21 30) 8 "8" nil) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "no documentation" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "no documentation" "DECIMALS" 0))) (om-make-point 31 537) (om-make-point 480 169) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 89.99999 100.0 110.00001 120.0 130.0 140.0 150.0 160.0 170.0 179.99999 190.0 200.0 210.0 220.00002 230.0 240.0 250.0 260.0 270.0 280.0 290.0 300.0 310.0 320.0 330.0 340.0 350.0 359.99997 370.0 380.0 389.99997 400.0 410.00003 420.0 430.0 440.00003 450.0 460.0 469.99997 480.0 490.00003)) (quote (15.0 11.812501 -1.1875 -19.8125 -27.625002 -17.375 5.0625 22.65625 10.750001 -28.625002 -56.0 -41.46875 -5.5937495 7.9375 1.4687501 12.90625 33.46875 22.34375 -6.3750005 -2.875 28.9375 39.90625 17.875 -8.75 -27.125 -37.15625 -33.625 -23.593752 -17.03125 -13.718749 -11.59375 -5.6249995 0.1875 -2.0625 -1.3125 2.625 -9.125 -21.46875 -6.1249995 12.125 2.84375 -3.96875 21.34375 50.5 46.59375 19.90625 5.9375 7.5625 8.875 16.0)) (quote bpf) 8))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) nil nil (pairlis (quote (picture deltapict outport inport zoom palette-mode obj-mode cmnpref notechancolor? grillestep mode winsize winpos show-stems)) (list nil (om-make-point 0 0) 0 0 1 0 0 (list 1 15 2 2 1) nil 1000 0 18350450 2621450 (quote t))) t nil nil nil) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "no documentation" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "no documentation" "DECIMALS" 0))) (om-make-point 44 218) (om-make-point 399 144) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 10 20 30 40 50 60 70 80 90 100 110 120 130 140 150 160 170 180 190 200 210 220 230 240 250 260 270 280 290 300 310 320 330 340 350 360 370 380 390 400 410 420 430 440 450 460 470 480 490)) (quote (15 -87 7 -39 21 79 -1 -82 -92 -42 84 4 -77 61 94 -1 -93 22 95 54 -48 10 -35 -90 18 -31 -36 40 -75 33 25 -49 6 54 -40 -96 67 62 -70 -32 92 56 91 -89 38 55 -86 96 13 34)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) "x" nil (pairlis (quote (picture deltapict outport inport zoom palette-mode obj-mode cmnpref notechancolor? grillestep mode winsize winpos show-stems)) (list nil (om-make-point 0 0) 0 0 1 0 0 (list 1 15 2 2 1) nil 1000 0 18350450 2621450 (quote t))) t nil nil nil) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 280 79) (om-make-point 28 30) 50 "50" nil) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "patch" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "NUM" 0))) (om-make-point 147 130) (om-make-point 213 53) nil nil nil 1) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 219 30) (om-make-point 35 30) 100 "100" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 141 27) (om-make-point 40 30) -100 "-100" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 0))) (om-make-point 139 60) (om-make-point 125 53) nil nil nil 1))) (quote ((6 2 2 0 nil 0) (1 0 2 1 nil 0) (0 0 2 2 nil 0) (2 0 5 2 nil 0) (4 0 5 3 nil 0) (8 0 6 2 nil 0) (11 0 8 0 nil 0) (7 0 8 1 nil 0) (10 0 11 0 nil 0) (9 0 11 1 nil 0))) nil 6.010006))
